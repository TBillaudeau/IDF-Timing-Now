{"version":3,"file":"static/js/173.285e360a.chunk.js","mappings":"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","sources":["components/JourneyDetails.js","pages/Itineraire.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Polyline, Marker, Popup, useMap } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { LatLng } from 'leaflet';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { convertTransportMode } from '../utils/stringUtils';\r\nimport TrainInfo from '../components/Timing';\r\nimport relations from '../data/relations.json';\r\nimport { getLineColorByLineID, LineLogoByLineID, getTransportByLineID } from '../utils/dataHelpers';\r\nimport ReactDOMServer from 'react-dom/server';\r\n\r\nfunction JourneyDetails({ journeyData }) {\r\n    const [showStops, setShowStops] = useState({});\r\n\r\n    // Toggle showStops for a section\r\n    const toggleStops = (sectionId) => {\r\n        setShowStops(prevState => ({ ...prevState, [sectionId]: !prevState[sectionId] }));\r\n    };\r\n\r\n    // Helper function to format date and time\r\n    const formatDateTime = (dateTime) => {\r\n        const date = new Date(dateTime);\r\n        if (!isNaN(date.getTime())) {\r\n            return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\r\n        }\r\n        return 'Unavailable';\r\n    };\r\n\r\n    // Extract coordinates and create markers for each section\r\n    const sectionDetails = journeyData.sections.map((section, index) => {\r\n        const coordinates = section.geojson?.coordinates.map(([lng, lat]) => [lat, lng]) || [];\r\n        const color = section.display_informations && section.display_informations.color ? `#${section.display_informations.color}` : '#333333'; // Default to a dark color if not specified\r\n        const markerPosition = coordinates[0] || null; // First coordinate as marker position\r\n\r\n        return {\r\n            index,\r\n            coordinates,\r\n            color,\r\n            markerPosition,\r\n            lineName: section.display_informations?.code || `Line ${index + 1}`,\r\n            lineID: section.links[1]?.id,\r\n            from: section.from,\r\n            to: section.to,\r\n            terminus: section.display_informations?.direction || 'Unknown',\r\n            mode: section.display_informations?.commercial_mode || section.mode,\r\n            stop_date_times: section.stop_date_times ? section.stop_date_times.slice(1, -1) : [],\r\n            departure: new Date(section.departure_date_time.replace(/(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2})/, \"$1-$2-$3T$4:$5:$6\")).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\r\n            arrival: new Date(section.arrival_date_time.replace(/(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2})/, \"$1-$2-$3T$4:$5:$6\")).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\r\n            duration: Math.floor(section.duration / 60),\r\n        };\r\n    });\r\n\r\n    // Helper function to format the total duration\r\n    const formatDuration = (seconds) => {\r\n        const hours = Math.floor(seconds / 3600);\r\n        const minutes = Math.floor((seconds % 3600) / 60);\r\n        return hours === 0 ? `${minutes} min` : `${hours} h ${minutes} min`;\r\n    };\r\n\r\n    const dx = sectionDetails[0].coordinates[0][0] - ((sectionDetails[0].coordinates[0][0] + sectionDetails[sectionDetails.length - 1].coordinates[0][0]) / 2);\r\n    const dy = sectionDetails[0].coordinates[0][1] - ((sectionDetails[0].coordinates[0][1] + sectionDetails[sectionDetails.length - 1].coordinates[0][1]) / 2);\r\n    const distance = Math.sqrt(dx * dx + dy * dy);\r\n    const zoom = Math.floor(8 - Math.log(distance) / Math.log(2));\r\n\r\n    const RecenterControl = () => {\r\n        const map = useMap();\r\n\r\n        useEffect(() => {\r\n            const control = new L.Control({ position: 'bottomright' });\r\n\r\n            control.onAdd = () => {\r\n                const button = L.DomUtil.create('button', 'leaflet-bar leaflet-control leaflet-control-custom');\r\n                button.innerHTML = '<svg class=\"w-4 h-4\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 14 20\"><path d=\"M7 0a7 7 0 0 0-1 13.92V19a1 1 0 1 0 2 0v-5.08A7 7 0 0 0 7 0Zm0 5.5A1.5 1.5 0 0 0 5.5 7a1 1 0 0 1-2 0A3.5 3.5 0 0 1 7 3.5a1 1 0 0 1 0 2Z\"/></svg>';\r\n                button.style.cssText = 'background-color: white; padding: 6px; cursor: pointer;';\r\n                button.onclick = () => map.flyTo([\r\n                    (sectionDetails[0].coordinates[0][0] + sectionDetails[sectionDetails.length - 1].coordinates[0][0]) / 2,\r\n                    (sectionDetails[0].coordinates[0][1] + sectionDetails[sectionDetails.length - 1].coordinates[0][1]) / 2\r\n                ], zoom);\r\n                return button;\r\n            };\r\n\r\n            control.addTo(map);\r\n\r\n            return () => control.remove();\r\n        }, [map]);\r\n\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <div className=\"max-w-4xl mx-auto\">\r\n            {sectionDetails.length > 0 && (\r\n                <div>\r\n                    <MapContainer\r\n                        className=\"z-10 h-96\"\r\n                        center={[\r\n                            (sectionDetails[0].coordinates[0][0] + sectionDetails[sectionDetails.length - 1].coordinates[0][0]) / 2,\r\n                            (sectionDetails[0].coordinates[0][1] + sectionDetails[sectionDetails.length - 1].coordinates[0][1]) / 2\r\n                        ]}\r\n                        zoom={zoom}\r\n                        attributionControl={false}\r\n                    >\r\n                        <TileLayer url=\"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png\" />\r\n                        <RecenterControl />\r\n\r\n                        {sectionDetails.map((section, idx) => (\r\n                            <React.Fragment key={idx}>\r\n                                <Polyline positions={section.coordinates} color={section.color} dashArray={section.mode === 'walking' ? '5, 5' : null}\r\n                                />\r\n                                {section.coordinates[0] && section.duration > 1 && (\r\n                                    <>\r\n                                        {section.lineID && (\r\n                                            <Marker\r\n                                                position={section.coordinates[0]}\r\n                                                icon={L.divIcon({\r\n                                                  className: 'my-div-icon',\r\n                                                  html: ReactDOMServer.renderToString(<LineLogoByLineID lineID={section.lineID.split(\":\").pop()} className=\"h-5\" />),\r\n                                                  iconSize: [25,], // size of the icon\r\n                                                  iconAnchor: [10, 20], // point of the icon which will correspond to marker's location\r\n                                                  popupAnchor: [0, -40] // point from which the popup should open relative to the iconAnchor\r\n                                                })}\r\n                                            />\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </MapContainer>\r\n                </div>\r\n            )}\r\n\r\n            {sectionDetails.map((section, index) => {\r\n                const isCorrespondence = section.from && section.to && section.from?.stop_point?.stop_area?.name === section.to?.stop_point?.stop_area?.name;\r\n                const isWaitingTime = !section.from && !section.to && section.duration;\r\n                const color = section.color;\r\n\r\n                if (section.mode === 'walking' && section.duration === 0) {\r\n                    return null;\r\n                }\r\n\r\n                return (\r\n                    <div key={section.index} className=\"bg-white relative flex p-4\">\r\n                        <div className=\"w-10 flex justify-center mr-4 flex-wrap\">                            <div\r\n                            style={{\r\n                                background: section.mode === 'walking' || section.mode === undefined\r\n                                    ? `linear-gradient(${color} 50%, transparent 50%)`\r\n                                    : color,\r\n                                backgroundSize: '1px 10px'\r\n                            }}\r\n                            className=\"absolute w-1 h-full z-10 top-6\"\r\n                        ></div>\r\n                            <div className=\"flex flex-col items-center space-y-2 mb-2 absolute z-20\">\r\n                                {section.mode !== undefined && !isCorrespondence ? (\r\n                                    <img\r\n                                        src={process.env.PUBLIC_URL + `/images/${convertTransportMode(section.mode)}.svg`}\r\n                                        alt={convertTransportMode(section.mode)}\r\n                                        className=\"bg-white h-6 lg:h-10\" />\r\n                                ) : (\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 19 30\" className=\"h-6 lg:h-10\">\r\n                                        <path fill=\"#fff\" stroke=\"#000\" stroke-width=\"2.5\" d=\"M1.75 9a7.75 7.75 0 1 1 15.5 0v12a7.75 7.75 0 0 1-15.5 0V9Z\"></path>\r\n                                    </svg>\r\n                                )}\r\n                                {section.lineID && (\r\n                                    // <img\r\n                                    //     src={process.env.PUBLIC_URL + `/images/${section.lineID.split(\":\").pop()}.svg`}\r\n                                    //     alt={section.lineID.split(\":\").pop()}\r\n                                    //     className=\"h-6 lg:h-10\"\r\n                                    // />\r\n                                    <LineLogoByLineID lineID={section.lineID.split(\":\").pop()} className=\"h-6 lg:h-10\" />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"space-y-6 w-full\">\r\n                            {isCorrespondence ? (\r\n                                <p className='text-sm'>{section.duration} minutes de correspondance</p>\r\n                            ) : isWaitingTime ? (\r\n                                <p className='text-sm'>{section.duration} minutes d'attente</p>\r\n                            ) : (\r\n                                <>\r\n                                    <div>\r\n                                        <div className=\"flex justify-between font-bold\">\r\n                                            <p>{section.from?.stop_point?.stop_area?.name || section.from?.name}</p>\r\n                                            <p>{section.departure}</p>\r\n                                        </div>\r\n                                        {section.terminus !== 'Unknown' && (\r\n                                            <div className=\"flex items-center text-xs\">\r\n                                                <svg className=\"w-2 h-2 mr-2\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 14 10\">\r\n                                                    <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M1 5h12m0 0L9 1m4 4L9 9\" />\r\n                                                </svg>\r\n                                                {section.terminus}\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                    {section.mode !== 'walking' && section.mode !== undefined && (\r\n                                        <TrainInfo\r\n                                            lineID={section.lineID.split(':').pop()}\r\n                                            stationName={\r\n                                                (() => {\r\n                                                    try {\r\n                                                        let relation = relations.find(relation => relation.arrid === section.from.id.split(\":\").pop());\r\n                                                        if (!relation) {\r\n                                                            relation = relations.find(relation => relation.zdaid === section.from.id.split(\":\").pop());\r\n                                                        }\r\n                                                        return relation ? relation.zdcid : '';\r\n                                                    } catch (error) {\r\n                                                        console.error('Error accessing zdcid:', error);\r\n                                                        return '';\r\n                                                    }\r\n                                                })()\r\n                                            }\r\n                                        />\r\n                                    )}\r\n                                    <div className=\"flex items-center space-x-2 text-gray-500 text-sm\">\r\n                                        <p>{section.stop_date_times.length + 1} arrêts | {section.duration} min</p>\r\n\r\n                                        <button onClick={() => toggleStops(section.id)}>\r\n                                            {showStops ? (\r\n                                                <svg class=\"w-2 h-2\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 14 8\">\r\n                                                    <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7 7.674 1.3a.91.91 0 0 0-1.348 0L1 7\" />\r\n                                                </svg>\r\n                                            ) : (\r\n                                                <svg class=\"w-2 h-2\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 14 8\">\r\n                                                    <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"m1 1 5.326 5.7a.909.909 0 0 0 1.348 0L13 1\" />\r\n                                                </svg>\r\n                                            )}\r\n                                        </button>\r\n                                    </div>\r\n                                    {showStops[section.id] && (\r\n                                        <ul>\r\n                                            {section.stop_date_times.map((stop, index) => (\r\n                                                <li key={index}>{stop.stop_point.name}</li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    )}\r\n                                    <div className=\"flex justify-between font-bold\">\r\n                                        <p>{section.to?.stop_point?.stop_area?.name || section.to?.name}</p>\r\n                                        <p>{section.arrival}</p>\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            })}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JourneyDetails;","import React, { useEffect, useState, useRef } from 'react';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { convertTransportMode } from '../utils/stringUtils';\r\nimport JourneyDetails from \"../components/JourneyDetails\";\r\nimport { LineLogoByLineID } from \"../utils/dataHelpers\";\r\nimport HashLoader from \"react-spinners/HashLoader\";\r\n\r\nfunction Trip() {\r\n    let params = new URLSearchParams(useLocation().search);\r\n    let from = params.get('from');\r\n    let to = params.get('to');\r\n\r\n    const [trainData, setTrainData] = useState([]);\r\n    const [selectedJourney, setSelectedJourney] = useState(null);\r\n    const journeyDetailsRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const fetchLineData = async () => {\r\n            const response = await fetch(`https://prim.iledefrance-mobilites.fr/marketplace/navitia/coverage/fr-idf/journeys?from=${from}&to=${to}`, {\r\n                headers: {\r\n                    'apikey': process.env.REACT_APP_IDFM_API_KEY\r\n                }\r\n            });\r\n            const data = await response.json();\r\n            console.log(data);\r\n            setTrainData(data.journeys ? data.journeys : []);\r\n        };\r\n\r\n        fetchLineData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (selectedJourney && journeyDetailsRef.current) {\r\n            journeyDetailsRef.current.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n    }, [selectedJourney]);\r\n\r\n    const handleJourneySelect = (journey) => {\r\n        setSelectedJourney(journey);\r\n    };\r\n\r\n    // Helper function to format the total duration\r\n    const formatDuration = (seconds) => {\r\n        const hours = Math.floor(seconds / 3600);\r\n        const minutes = Math.floor((seconds % 3600) / 60);\r\n        return hours === 0 ? `${minutes} min` : `${hours} h ${minutes} min`;\r\n    };\r\n\r\n    // Helper function to format the cost\r\n    const formatCost = (fare) => {\r\n        if (!fare.found) return 'Not available';\r\n        return `${(fare.total.value / 100).toFixed(2)} ${fare.total.currency === 'centime' ? 'EUR' : fare.total.currency}`;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {trainData.length > 0 ? (\r\n                <div>\r\n                    {trainData.map((journey, index) => {\r\n                        const totalDuration = formatDuration(journey.durations.total);\r\n                        const totalCost = formatCost(journey.fare);\r\n                        const departureTime = new Date(new Date(journey.departure_date_time.replace(/(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2})/, \"$1-$2-$3T$4:$5:$6Z\")).getTime() - 60 * 60 * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n                        const arrivalTime = new Date(new Date(journey.arrival_date_time.replace(/(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2})/, \"$1-$2-$3T$4:$5:$6Z\")).getTime() - 60 * 60 * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n                        return (\r\n                            <div\r\n                                key={index}\r\n                                className={`flex flex-col p-2 bg-white dark:bg-gray-800 dark:text-white cursor-pointer ${selectedJourney === journey ? 'sticky top-0 z-50' : ''}`}\r\n                                onClick={() => handleJourneySelect(journey)}\r\n                            >                                <div className=\"flex overflow-x-auto py-2\">\r\n                                    {journey.sections.map((section, idx) => (\r\n                                        <React.Fragment key={idx}>\r\n                                            <div className='flex items-center gap-1 shrink-0'>\r\n                                                {section.display_informations?.commercial_mode || section.mode ? (\r\n                                                    section.mode !== 'walking' || (section.mode === 'walking' && section.duration >= 60) ? (\r\n                                                        <img src={process.env.PUBLIC_URL + `/images/${convertTransportMode(section.display_informations?.commercial_mode || section.mode)}${localStorage.theme === 'dark' ? '_LIGHT' : ''}.svg`} alt={convertTransportMode(section.display_informations?.commercial_mode)} className=\"h-6 lg:h-10\" />\r\n                                                    ) : null\r\n                                                ) : null}\r\n                                                {section.links[1]?.id ? (\r\n                                                    // <img src={process.env.PUBLIC_URL + `/images/${section.links[1]?.id.split(\":\").pop()}.svg`} alt={section.links[1]?.id.split(\":\").pop()} className=\"h-6 lg:h-10\" />\r\n                                                    <LineLogoByLineID lineID={section.links[1]?.id.split(\":\").pop()} className=\"h-6 lg:h-10\" />\r\n\r\n                                                ) : null}\r\n                                                {idx < journey.sections.length - 1 && (section.display_informations?.commercial_mode || section.mode || section.links[1]?.id) && (\r\n                                                    section.mode !== 'walking' || (section.mode === 'walking' && section.duration >= 60) ? (\r\n                                                        idx !== journey.sections.length - 2 ? (\r\n                                                            <svg className=\"w-2 h-2 mr-0.5\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 8 14\">\r\n                                                                <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"m1 13 5.7-5.326a.909.909 0 0 0 0-1.348L1 1\" />\r\n                                                            </svg>\r\n                                                        ) : null\r\n                                                    ) : null\r\n                                                )}\r\n                                            </div>\r\n                                        </React.Fragment>\r\n                                    ))}\r\n                                </div>\r\n                                <div className=\"flex justify-between items-center\">\r\n                                    <p className='text-sm'>{totalCost}</p>\r\n                                    <div className='text-right'>\r\n                                        <p><strong>{totalDuration}</strong></p>\r\n                                        <p className='text-sm'>{departureTime} - {arrivalTime}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n\r\n                    {selectedJourney &&\r\n                        <div ref={journeyDetailsRef}>\r\n                            <JourneyDetails key={Date.now()} journeyData={selectedJourney} />\r\n                        </div>\r\n                    }\r\n                </div>\r\n            ) : (\r\n                <div className=\"flex items-center justify-center\" style={{ height: 'calc(100vh - 130px)' }}>\r\n                    <HashLoader size={30} color=\"#6D28D9\" />\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Trip;"],"names":["_ref","journeyData","_useState","useState","_useState2","_slicedToArray","showStops","setShowStops","sectionDetails","sections","map","section","index","_section$geojson","_section$display_info","_section$links$","_section$display_info2","_section$display_info3","coordinates","geojson","_ref2","_ref3","lng","color","display_informations","concat","markerPosition","lineName","code","lineID","links","id","from","to","terminus","direction","mode","commercial_mode","stop_date_times","slice","departure","Date","departure_date_time","replace","toLocaleTimeString","hour","minute","arrival","arrival_date_time","duration","Math","floor","dx","length","dy","distance","sqrt","zoom","log","RecenterControl","useMap","useEffect","control","L","position","onAdd","button","create","innerHTML","style","cssText","onclick","flyTo","addTo","remove","_jsxs","className","children","_jsx","MapContainer","center","attributionControl","TileLayer","url","idx","React","Polyline","positions","dashArray","_Fragment","Marker","icon","html","ReactDOMServer","LineLogoByLineID","split","pop","iconSize","iconAnchor","popupAnchor","_section$from","_section$from$stop_po","_section$from$stop_po2","_section$to","_section$to$stop_poin","_section$to$stop_poin2","_section$from2","_section$from2$stop_p","_section$from2$stop_p2","_section$from3","_section$to2","_section$to2$stop_poi","_section$to2$stop_poi2","_section$to3","isCorrespondence","stop_point","stop_area","name","isWaitingTime","background","undefined","backgroundSize","xmlns","viewBox","fill","stroke","d","src","process","convertTransportMode","alt","TrainInfo","stationName","relation","relations","find","arrid","zdaid","zdcid","error","console","onClick","sectionId","prevState","_objectSpread","_defineProperty","class","stop","params","URLSearchParams","useLocation","search","get","trainData","setTrainData","_useState3","_useState4","selectedJourney","setSelectedJourney","journeyDetailsRef","useRef","fetchLineData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","data","wrap","_context","prev","next","fetch","headers","sent","json","journeys","apply","arguments","current","scrollIntoView","behavior","journey","fare","totalDuration","seconds","hours","minutes","formatDuration","durations","total","totalCost","found","value","toFixed","currency","departureTime","getTime","arrivalTime","handleJourneySelect","_section$links$2","_section$display_info4","_section$links$3","localStorage","theme","strokeLinecap","strokeLinejoin","strokeWidth","ref","JourneyDetails","now","height","HashLoader","size"],"sourceRoot":""}