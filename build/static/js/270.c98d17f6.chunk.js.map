{"version":3,"file":"static/js/270.c98d17f6.chunk.js","mappings":"wLAKIA,EAAO,CACP,CACIC,GAAI,QACJC,KAAM,gBACNC,IAAK,oEAET,CACIF,GAAI,YACJC,KAAM,+CACNC,IAAK,wEAET,CACIF,GAAI,YACJC,KAAM,6CACNC,IAAK,4EA0Eb,UAtEA,WAAkB,IAADC,EACfC,GAAgDC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArDI,EAAgBF,EAAA,GAAEG,EAAmBH,EAAA,GACtCI,GAAWC,EAAAA,EAAAA,MAMXC,EAAc,SAACC,GACnB,IAAMC,OAAsBC,IAAXF,EAAuBG,EAAqBC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,OAAOC,UAAYP,CAAM,IAAEM,OAAS,GACnH,MAAkC,SAA3BL,EAASO,cAA2BP,EAASQ,uBAAsB,GAAAC,OAAMT,EAASO,cAAcG,cAAa,KAAAD,OAAIT,EAASW,UACnI,EAEA,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mDAAkDC,SAAA,EAC/DF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uDAAsDC,SAAA,EACnEC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,iCAAgCC,SAAC,0CAC9C7B,EAAK+B,KAAI,SAACA,EAAKC,GAAK,OACnBL,EAAAA,EAAAA,MAAA,OAAiBC,UAAU,OAAMC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,8BAA6BC,SAAEE,EAAI7B,QACjD4B,EAAAA,EAAAA,KAAA,MAAIF,UAAU,0BAAyBC,UACrCF,EAAAA,EAAAA,MAAA,KAAGM,KAAMF,EAAI5B,IAAK+B,OAAO,SAASC,IAAI,sBAAsBP,UAAU,mDAAkDC,SAAA,CAAC,gBACnHE,EAAI9B,UAJJ+B,EAOJ,QAIVL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uCAAsCC,SAAA,EACnDC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,yCAAwCC,SAAC,0CACvDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,SAAOM,QAAQ,OAAOR,UAAU,+DAA8DC,SAAC,uBAC/FF,EAAAA,EAAAA,MAAA,UACE1B,GAAG,OACH2B,UAAU,2QACVS,MAAO5B,EACP6B,SAAU,SAACC,GAAK,OAjCG,SAACA,EAAOC,GACnCA,EAAOD,EAAML,OAAOG,MACtB,CA+B+BI,CAAqBF,EAAO7B,EAAoB,EAACmB,SAAA,EAEtEC,EAAAA,EAAAA,KAAA,UAAQO,MAAM,GAAER,SAAC,yCAChBa,OAAOC,QAAQC,EAAAA,GAAWb,KAAI,SAAAc,GAAA,IAAEC,GAAFtC,EAAAA,EAAAA,GAAAqC,EAAA,GAAU,UACvCf,EAAAA,EAAAA,KAAA,UAAuBO,MAAOS,EAASjB,SACpCiB,GADUA,EAEJ,WAKfnB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,SAAOM,QAAQ,OAAOR,UAAU,+DAA8DC,SAAC,WAC/FF,EAAAA,EAAAA,MAAA,UACE1B,GAAG,OACH2B,UAAU,2QACVU,SAAU,SAACC,GACT5B,EAAS,SAADa,OAAUe,EAAML,OAAOG,MAAMU,MAAM,KAAKC,OAClD,EAAEnB,SAAA,EAEFC,EAAAA,EAAAA,KAAA,UAAQO,MAAM,GAAER,SAAC,8BACW,QADoBzB,EAC/CwC,EAAAA,EAAUnC,UAAiB,IAAAL,OAAA,EAA3BA,EAA6B2B,KAAI,SAACkB,GAAM,OACvCnB,EAAAA,EAAAA,KAAA,UAAqBO,MAAOY,EAAOpB,SAChChB,EAAYoC,EAAOF,MAAM,KAAKC,QADpBC,EAEJ,eAOvB,C","sources":["pages/Plans.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { lineTypes } from '../components/Trafic';\r\nimport referentielDesLignes from '../data/referentiel-des-lignes.json';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nlet maps = [\r\n    {\r\n        id: 'Metro',\r\n        name: 'Plan MÃ©tro',\r\n        url: 'https://eu.ftp.opendatasoft.com/stif/PlansRegion/Plans/METRO.pdf'\r\n    },\r\n    {\r\n        id: 'RÃ©gion',\r\n        name: 'Plan du rÃ©seau rÃ©gional des transports',\r\n        url: 'https://eu.ftp.opendatasoft.com/stif/PlansRegion/Plans/REGION_GF.pdf'\r\n    },\r\n    {\r\n        id: 'Noctilien',\r\n        name: 'Plan du rÃ©seau de Nuit (schÃ©matique)',\r\n        url: 'https://eu.ftp.opendatasoft.com/stif/PlansRegion/Plans/NOCTILIEN_MF.pdf'\r\n    },\r\n];\r\n\r\nfunction Plans() {\r\n  const [selectedLineType, setSelectedLineType] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleDropdownChange = (event, setter) => {\r\n    setter(event.target.value);\r\n  };\r\n\r\n  const getLineName = (lineID) => {\r\n    const lineInfo = lineID !== undefined ? referentielDesLignes.find(line => line.fields.id_line === lineID).fields : '';\r\n    return lineInfo.transportmode === 'rail' ? lineInfo.shortname_groupoflines : `${lineInfo.transportmode.toUpperCase()} ${lineInfo.name_line}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 m-2 sm:m-6\">\r\n      <div className=\"bg-white dark:text-white dark:bg-gray-800 p-4 lg:p-6\">\r\n        <h1 className=\"text-xl font-bold mb-4 lg:pb-6\">Plan du rÃ©seau en ÃŽle-de-France</h1>\r\n        {maps.map((map, index) => (\r\n          <div key={index} className=\"mb-4\">\r\n            <h2 className=\"text-lg font-medium lg:pb-6\">{map.name}</h2>\r\n            <h2 className=\"font-bold border-1 mr-4\">\r\n              <a href={map.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 dark:text-blue-300 hover:underline\">\r\n                ðŸ—º {map.id}\r\n              </a>\r\n            </h2>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"bg-white dark:bg-gray-800 p-4 lg:p-6\">\r\n        <h1 className=\"text-xl font-bold pb-6 dark:text-white\">Plans des lignes en ÃŽle-de-France</h1>\r\n        <div className='mt-2'>\r\n          <label htmlFor=\"mode\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">Mode de transport</label>\r\n          <select\r\n            id=\"mode\"\r\n            className=\"bg-gray-50 border border-gray-300 text-gray-900 h-12 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\"\r\n            value={selectedLineType}\r\n            onChange={(event) => handleDropdownChange(event, setSelectedLineType)}\r\n          >\r\n            <option value=\"\">SÃ©lectionnez un mode de transport</option>\r\n            {Object.entries(lineTypes).map(([lineType]) => (\r\n              <option key={lineType} value={lineType}>\r\n                {lineType}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className='mt-4'>\r\n          <label htmlFor=\"line\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">Ligne</label>\r\n          <select\r\n            id=\"line\"\r\n            className=\"bg-gray-50 border border-gray-300 text-gray-900 h-12 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\"\r\n            onChange={(event) => {\r\n              navigate(`/line/${event.target.value.split(':').pop()}`);\r\n            }}\r\n          >\r\n            <option value=\"\">SÃ©lectionnez une ligne</option>\r\n            {lineTypes[selectedLineType]?.map((lineId) => (\r\n              <option key={lineId} value={lineId}>\r\n                {getLineName(lineId.split(':').pop())}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Plans;"],"names":["maps","id","name","url","_lineTypes$selectedLi","_useState","useState","_useState2","_slicedToArray","selectedLineType","setSelectedLineType","navigate","useNavigate","getLineName","lineID","lineInfo","undefined","referentielDesLignes","find","line","fields","id_line","transportmode","shortname_groupoflines","concat","toUpperCase","name_line","_jsxs","className","children","_jsx","map","index","href","target","rel","htmlFor","value","onChange","event","setter","handleDropdownChange","Object","entries","lineTypes","_ref","lineType","split","pop","lineId"],"sourceRoot":""}