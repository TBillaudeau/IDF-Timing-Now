{"version":3,"file":"static/js/669.aed14ab2.chunk.js","mappings":"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","sources":["../node_modules/react-leaflet/lib/Polyline.js","components/JourneyDetails.js","pages/Itineraire.js","../node_modules/react-leaflet/lib/Marker.js"],"sourcesContent":["import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { Polyline as LeafletPolyline } from 'leaflet';\nexport const Polyline = createPathComponent(function createPolyline({ positions , ...options }, ctx) {\n    const polyline = new LeafletPolyline(positions, options);\n    return createElementObject(polyline, extendContext(ctx, {\n        overlayContainer: polyline\n    }));\n}, function updatePolyline(layer, props, prevProps) {\n    if (props.positions !== prevProps.positions) {\n        layer.setLatLngs(props.positions);\n    }\n});\n","import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Polyline, Marker, Popup } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { LatLng } from 'leaflet';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { convertTransportMode } from '../utils/stringUtils';\r\nimport TrainInfo from '../components/Timing';\r\nimport relations from '../data/relations.json';\r\n\r\n\r\nfunction JourneyDetails({ journeyData }) {\r\n    // Helper function to format date and time\r\n    const formatDateTime = (dateTime) => {\r\n        const date = new Date(dateTime);\r\n        if (!isNaN(date.getTime())) {\r\n            return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\r\n        }\r\n        return 'Unavailable';\r\n    };\r\n\r\n    // Extract coordinates and create markers for each section\r\n    const sectionDetails = journeyData.sections.map((section, index) => {\r\n        const coordinates = section.geojson?.coordinates.map(([lng, lat]) => [lat, lng]) || [];\r\n        const color = section.display_informations && section.display_informations.color ? `#${section.display_informations.color}` : '#333333'; // Default to a dark color if not specified\r\n        const markerPosition = coordinates[0] || null; // First coordinate as marker position\r\n\r\n        return {\r\n            index,\r\n            coordinates,\r\n            color,\r\n            markerPosition,\r\n            lineName: section.display_informations?.code || `Line ${index + 1}`,\r\n            lineID: section.links[1]?.id,\r\n            from: section.from,\r\n            to: section.to,\r\n            terminus: section.display_informations?.direction || 'Unknown',\r\n            mode: section.display_informations?.commercial_mode || section.mode,\r\n            departure: new Date(section.departure_date_time.replace(/(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2})/, \"$1-$2-$3T$4:$5:$6Z\")).toLocaleString(),\r\n            arrival: new Date(section.arrival_date_time.replace(/(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2})/, \"$1-$2-$3T$4:$5:$6Z\")).toLocaleString(),\r\n            duration: Math.ceil(section.duration / 60),\r\n        };\r\n    });\r\n\r\n    // Helper function to format the total duration\r\n    const formatDuration = (seconds) => {\r\n        const hours = Math.floor(seconds / 3600);\r\n        const minutes = Math.floor((seconds % 3600) / 60);\r\n        return hours === 0 ? `${minutes} min` : `${hours} h ${minutes} min`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"max-w-4xl mx-auto\">\r\n            {/* <h2 className=\"text-2xl font-bold text-center mb-6\">Journey Overview</h2>\r\n\r\n            <div className=\"bg-white shadow-lg rounded-lg p-6 mb-6\">\r\n                <h3 className=\"text-xl font-semibold mb-4\">Basic Information</h3>\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                    <p><strong>Departure:</strong> {formatDateTime(journeyData.departure_date_time)}</p>\r\n                    <p><strong>Arrival:</strong> {formatDateTime(journeyData.arrival_date_time)}</p>\r\n                    <p><strong>Duration:</strong> {Math.ceil(journeyData.durations.total / 60)} minutes</p>\r\n                    <p><strong>Walking distance:</strong> {journeyData.distances.walking} meters</p>\r\n                    <p><strong>CO2 Emission:</strong> {journeyData.co2_emission.value} {journeyData.co2_emission.unit}</p>\r\n                </div>\r\n            </div> */}\r\n\r\n            {sectionDetails.length > 0 && (\r\n                <div>\r\n                    <MapContainer\r\n                        className=\"z-10 h-96\"\r\n                        center={[\r\n                            (sectionDetails[0].coordinates[0][0] + sectionDetails[sectionDetails.length - 1].coordinates[0][0]) / 2,\r\n                            (sectionDetails[0].coordinates[0][1] + sectionDetails[sectionDetails.length - 1].coordinates[0][1]) / 2\r\n                        ]}\r\n                        zoom={new LatLng(sectionDetails[0].coordinates[0][0], sectionDetails[0].coordinates[0][1]).distanceTo(new LatLng(sectionDetails[sectionDetails.length - 1].coordinates[0][0], sectionDetails[sectionDetails.length - 1].coordinates[0][1])) < 1000 ? 13 : new LatLng(sectionDetails[0].coordinates[0][0], sectionDetails[0].coordinates[0][1]).distanceTo(new LatLng(sectionDetails[sectionDetails.length - 1].coordinates[0][0], sectionDetails[sectionDetails.length - 1].coordinates[0][1])) < 5000 ? 12 : new LatLng(sectionDetails[0].coordinates[0][0], sectionDetails[0].coordinates[0][1]).distanceTo(new LatLng(sectionDetails[sectionDetails.length - 1].coordinates[0][0], sectionDetails[sectionDetails.length - 1].coordinates[0][1])) < 10000 ? 11 : 10}\r\n                        attributionControl={false}\r\n                    >\r\n                        <TileLayer url=\"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png\" />\r\n                        {sectionDetails.map((section, idx) => (\r\n                            <React.Fragment key={idx}>\r\n                                <Polyline positions={section.coordinates} color={section.color} dashArray={section.mode === 'walking' ? '5, 5' : null}\r\n                                />\r\n                                {section.coordinates[0] && section.duration > 1 && (\r\n                                    <>\r\n                                        {section.lineID && (\r\n                                            <Marker\r\n                                                position={section.coordinates[0]}\r\n                                                icon={L.icon({\r\n                                                    iconUrl: process.env.PUBLIC_URL + `/images/${section.lineID.split(\":\").pop()}.svg`,\r\n                                                    iconSize: [25,], // size of the icon\r\n                                                    iconAnchor: [10, 20], // point of the icon which will correspond to marker's location\r\n                                                    popupAnchor: [0, -40] // point from which the popup should open relative to the iconAnchor\r\n                                                })}\r\n                                            />\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </MapContainer>\r\n                </div>\r\n            )}\r\n\r\n            {sectionDetails.map((section, index) => {\r\n                const isCorrespondence = section.from && section.to && section.from.name === section.to.name;\r\n                const isWaitingTime = !section.from && !section.to && section.duration;\r\n                const color = section.color;\r\n\r\n                if (section.mode === 'walking' && section.duration === 0) {\r\n                    return null;\r\n                }\r\n\r\n                return (\r\n                    <div key={section.index} className=\"bg-white relative flex p-4\">\r\n                        <div className=\"w-20\">\r\n                            <div\r\n                                style={{\r\n                                    background: section.mode === 'walking' || section.mode === undefined\r\n                                        ? `linear-gradient(${color} 50%, transparent 50%)`\r\n                                        : color,\r\n                                    backgroundSize: '1px 10px',\r\n                                    transform: 'translateY(-12px)'\r\n                                }}\r\n                                className=\"absolute w-1 h-full ml-2 z-0\"\r\n                            ></div>\r\n                            <div className=\"flex items-center mb-2 absolute\">\r\n                                {section.mode !== undefined ? (\r\n                                    <img\r\n                                        src={process.env.PUBLIC_URL + `/images/${convertTransportMode(section.mode)}${localStorage.theme === 'dark' ? '_LIGHT' : ''}.svg`}\r\n                                        alt={convertTransportMode(section.mode)}\r\n                                        className=\"bg-white outline outline-4 outline-white h-5 lg:h-10 mr-1\"                                    />\r\n                                ) : (\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 19 30\" className=\"h-5 lg:h-10 mx-1\">\r\n                                        <path fill=\"#fff\" stroke=\"#000\" stroke-width=\"2.5\" d=\"M1.75 9a7.75 7.75 0 1 1 15.5 0v12a7.75 7.75 0 0 1-15.5 0V9Z\"></path>\r\n                                    </svg>\r\n                                )}\r\n                                {section.lineID && (\r\n                                    <img\r\n                                        src={process.env.PUBLIC_URL + `/images/${section.lineID.split(\":\").pop()}.svg`}\r\n                                        alt={section.lineID.split(\":\").pop()}\r\n                                        className=\"h-5 lg:h-10 mr-2 lg:mr-4\"\r\n                                    />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            {isCorrespondence ? (\r\n                                <p>Correspondance - {section.duration} minutes</p>\r\n                            ) : isWaitingTime ? (\r\n                                <p>Temps d'attente : {section.duration} minutes</p>\r\n                            ) : (\r\n                                <>\r\n                                    <div className=\"flex justify-between\">\r\n                                        <p>{section.from?.name}</p>\r\n                                        <p>{section.departure}</p>\r\n                                    </div>\r\n                                    <p><strong>Terminus:</strong> {section.terminus}</p>\r\n                                    <div className=\"flex justify-between\">\r\n                                        <p>{section.to?.name}</p>\r\n                                        <p>{section.arrival}</p>\r\n                                    </div>\r\n                                    {section.mode !== 'walking' && section.mode !== undefined && (\r\n                                        <TrainInfo \r\n                                            lineID={section.lineID.split(':').pop()} \r\n                                            stationName={\r\n                                                (() => {\r\n                                                    try {\r\n                                                        let relation = relations.find(relation => relation.arrid === section.from.id.split(\":\").pop());\r\n                                                        if (!relation) {\r\n                                                            relation = relations.find(relation => relation.zdaid === section.from.id.split(\":\").pop());\r\n                                                        }\r\n                                                        return relation ? relation.zdcid : '';\r\n                                                    } catch (error) {\r\n                                                        console.error('Error accessing zdcid:', error);\r\n                                                        return '';\r\n                                                    }\r\n                                                })()\r\n                                            }\r\n                                        />\r\n                                    )}\r\n                                    <p><strong>Duration:</strong> {section.duration} minutes</p>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            })}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JourneyDetails;","import React, { useEffect, useState, useRef } from 'react';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { convertTransportMode } from '../utils/stringUtils';\r\nimport JourneyDetails from \"../components/JourneyDetails\";\r\n\r\nfunction Trip() {\r\n    let params = new URLSearchParams(useLocation().search);\r\n    let from = params.get('from');\r\n    let to = params.get('to');\r\n\r\n    const [trainData, setTrainData] = useState([]);\r\n    const [selectedJourney, setSelectedJourney] = useState(null);\r\n    const journeyDetailsRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const fetchLineData = async () => {\r\n            const response = await fetch(`https://prim.iledefrance-mobilites.fr/marketplace/navitia/coverage/fr-idf/journeys?from=${from}&to=${to}`, {\r\n                headers: {\r\n                    'apikey': process.env.REACT_APP_IDFM_API_KEY\r\n                }\r\n            });\r\n            const data = await response.json();\r\n            console.log(data);\r\n            setTrainData(data.journeys ? data.journeys : []);\r\n        };\r\n\r\n        fetchLineData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (selectedJourney && journeyDetailsRef.current) {\r\n          journeyDetailsRef.current.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n      }, [selectedJourney]);\r\n\r\n    const handleJourneySelect = (journey) => {\r\n        setSelectedJourney(journey);\r\n    };\r\n\r\n    // Helper function to format the total duration\r\n    const formatDuration = (seconds) => {\r\n        const hours = Math.floor(seconds / 3600);\r\n        const minutes = Math.floor((seconds % 3600) / 60);\r\n        return hours === 0 ? `${minutes} min` : `${hours} h ${minutes} min`;\r\n    };\r\n\r\n    // Helper function to format the cost\r\n    const formatCost = (fare) => {\r\n        if (!fare.found) return 'Not available';\r\n        return `${(fare.total.value / 100).toFixed(2)} ${fare.total.currency === 'centime' ? 'EUR' : fare.total.currency}`;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {trainData.length > 0 ? (\r\n                <div>\r\n                    {trainData.map((journey, index) => {\r\n                        const totalDuration = formatDuration(journey.durations.total);\r\n                        const totalCost = formatCost(journey.fare);\r\n                        const departureTime = new Date(new Date(journey.departure_date_time.replace(/(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2})/, \"$1-$2-$3T$4:$5:$6Z\")).getTime() - 60 * 60 * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n                        const arrivalTime = new Date(new Date(journey.arrival_date_time.replace(/(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2})/, \"$1-$2-$3T$4:$5:$6Z\")).getTime() - 60 * 60 * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n                        return (\r\n                            <div \r\n                            key={index} \r\n                            className={`flex flex-col mb-4 p-2 border rounded bg-white dark:bg-gray-800 dark:text-white cursor-pointer ${selectedJourney === journey ? 'sticky top-0 z-50' : ''}`} \r\n                            onClick={() => handleJourneySelect(journey)}\r\n                        >                                <div className=\"flex overflow-x-auto py-2\">\r\n                                    {journey.sections.map((section, idx) => (\r\n                                        <React.Fragment key={idx}>\r\n                                            <div className='flex items-center gap-1 shrink-0'>\r\n                                                {section.display_informations?.commercial_mode || section.mode ? (\r\n                                                    section.mode !== 'walking' || (section.mode === 'walking' && section.duration >= 60) ? (\r\n                                                        <img src={process.env.PUBLIC_URL + `/images/${convertTransportMode(section.display_informations?.commercial_mode  || section.mode )}${localStorage.theme === 'dark' ? '_LIGHT' : ''}.svg`} alt={convertTransportMode(section.display_informations?.commercial_mode )} className=\"h-6 lg:h-10\" />\r\n                                                    ) : null\r\n                                                ) : null}\r\n                                                {section.links[1]?.id ? (\r\n                                                    <img src={process.env.PUBLIC_URL + `/images/${section.links[1]?.id.split(\":\").pop()}.svg`} alt={section.links[1]?.id.split(\":\").pop()} className=\"h-6 lg:h-10\" />\r\n                                                ) : null}\r\n                                                {idx < journey.sections.length - 1 && (section.display_informations?.commercial_mode || section.mode || section.links[1]?.id) && (\r\n                                                    section.mode !== 'walking' || (section.mode === 'walking' && section.duration >= 60) ? (\r\n                                                        idx !== journey.sections.length - 2 ? (\r\n                                                            <svg className=\"w-2 h-2 mr-0.5\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 8 14\">\r\n                                                                <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"m1 13 5.7-5.326a.909.909 0 0 0 0-1.348L1 1\"/>\r\n                                                            </svg>\r\n                                                        ) : null\r\n                                                    ) : null\r\n                                                )}\r\n                                            </div>\r\n                                        </React.Fragment>\r\n                                    ))}\r\n                                </div>\r\n                                <div className=\"flex justify-between items-center\">\r\n                                    <p className='text-sm'>{totalCost}</p>\r\n                                    <div className='text-right'>\r\n                                        <p><strong>{totalDuration}</strong></p>\r\n                                        <p className='text-sm'>{departureTime} - {arrivalTime}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n\r\n                    {selectedJourney && \r\n                        <div ref={journeyDetailsRef}>\r\n                            <JourneyDetails journeyData={selectedJourney} />\r\n                        </div>\r\n                    }\r\n                </div>\r\n            ) : (\r\n                <p>Loading journey details...</p>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Trip;","import { createElementObject, createLayerComponent, extendContext } from '@react-leaflet/core';\nimport { Marker as LeafletMarker } from 'leaflet';\nexport const Marker = createLayerComponent(function createMarker({ position , ...options }, ctx) {\n    const marker = new LeafletMarker(position, options);\n    return createElementObject(marker, extendContext(ctx, {\n        overlayContainer: marker\n    }));\n}, function updateMarker(marker, props, prevProps) {\n    if (props.position !== prevProps.position) {\n        marker.setLatLng(props.position);\n    }\n    if (props.icon != null && props.icon !== prevProps.icon) {\n        marker.setIcon(props.icon);\n    }\n    if (props.zIndexOffset != null && props.zIndexOffset !== prevProps.zIndexOffset) {\n        marker.setZIndexOffset(props.zIndexOffset);\n    }\n    if (props.opacity != null && props.opacity !== prevProps.opacity) {\n        marker.setOpacity(props.opacity);\n    }\n    if (marker.dragging != null && props.draggable !== prevProps.draggable) {\n        if (props.draggable === true) {\n            marker.dragging.enable();\n        } else {\n            marker.dragging.disable();\n        }\n    }\n});\n"],"names":["Polyline","createPathComponent","_ref","ctx","positions","options","_objectWithoutProperties","_excluded","polyline","LeafletPolyline","createElementObject","extendContext","overlayContainer","layer","props","prevProps","setLatLngs","sectionDetails","journeyData","sections","map","section","index","_section$geojson","_section$display_info","_section$links$","_section$display_info2","_section$display_info3","coordinates","geojson","_ref2","_ref3","_slicedToArray","lng","color","display_informations","concat","markerPosition","lineName","code","lineID","links","id","from","to","terminus","direction","mode","commercial_mode","departure","Date","departure_date_time","replace","toLocaleString","arrival","arrival_date_time","duration","Math","ceil","_jsxs","className","children","length","_jsx","MapContainer","center","zoom","LatLng","distanceTo","attributionControl","TileLayer","url","idx","React","dashArray","_Fragment","Marker","position","icon","L","iconUrl","process","split","pop","iconSize","iconAnchor","popupAnchor","_section$from","_section$to","isCorrespondence","name","isWaitingTime","style","background","undefined","backgroundSize","transform","src","convertTransportMode","localStorage","theme","alt","xmlns","viewBox","fill","stroke","d","TrainInfo","stationName","relation","relations","find","arrid","zdaid","zdcid","error","console","params","URLSearchParams","useLocation","search","get","_useState","useState","_useState2","trainData","setTrainData","_useState3","_useState4","selectedJourney","setSelectedJourney","journeyDetailsRef","useRef","useEffect","fetchLineData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","data","wrap","_context","prev","next","fetch","headers","sent","json","log","journeys","stop","apply","arguments","current","scrollIntoView","behavior","journey","fare","totalDuration","seconds","hours","floor","minutes","formatDuration","durations","total","totalCost","found","value","toFixed","currency","departureTime","getTime","toLocaleTimeString","hour","minute","arrivalTime","onClick","handleJourneySelect","_section$links$2","_section$links$3","_section$display_info4","_section$links$4","strokeLinecap","strokeLinejoin","strokeWidth","ref","JourneyDetails","createLayerComponent","marker","LeafletMarker","setLatLng","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","dragging","draggable","enable","disable"],"sourceRoot":""}